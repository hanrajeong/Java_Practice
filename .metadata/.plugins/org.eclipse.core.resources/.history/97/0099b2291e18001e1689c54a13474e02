import java.util.HashMap;

/*
 *  프로그래머스 문제 풀이
 *  https://school.programmers.co.kr/learn/courses/30/lessons/42579
 *  입력 : 노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays
 *  출력 : 베스트 앨범에 들어갈 노래의 고유 번호를 순서대로 return
 */

public class July_01_05 {
	public int[] solution(String[] genres, int[] plays) {
		if((genres == null) || (plays == null)) {
			return null;
		}
        int[] answer = {};
        HashMap<String, int[]> play_list = new HashMap<>();
        HashMap<String, Integer> total_play_time = new HashMap<>();
        for(int i = 0; i < genres.length; i++) {
        	if(play_list.containsKey(genres[i])) {
        		total_play_time.put(genres[i], total_play_time.get(genres[i]) + plays[i]);
        		if(play_list.get(genres[i]).length == 1) {
        			int[] new_int = {i, play_list.get(genres[i])[0]};
        			play_list.put(genres[i], new_int);
        		}
        		else {
        			int first = play_list.get(genres[i])[0];
        			int second = play_list.get(genres[i])[1];
        			if(plays[first] < plays[second]) {
        				if(plays[first] > plays[i]) {
        					continue;
        				}
        				else {
        					int[] new_int = {i, second};
                			play_list.put(genres[i], new_int);
        				}
        			}
        			else {
        				if(plays[second] > plays[i]) {
        					continue;
        				}
        				else {
        					int[] new_int = {i, first};
        					play_list.put(genres[i], new_int);
        				}
        			}
        		}
        	}
        	else {
        		int[] new_int = {i};
        		play_list.put(genres[i], new_int);
        		total_play_time.put(generes[i], plays[i]);
        	}
        }
        
        return answer;
    }
}
