import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/*
 *  프로그래머스 문제 풀이
 *  https://school.programmers.co.kr/learn/courses/30/lessons/42579
 *  입력 : 노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays
 *  출력 : 베스트 앨범에 들어갈 노래의 고유 번호를 순서대로 return
 */

public class July_01_05 {
	public int[] solution(String[] genres, int[] plays) {
		int[] answer = {};
		// 장르 별 노래를 딕셔너리 형태로 저장
		HashMap<String, ArrayList<Song>> song_list = new HashMap<>();
		// 장르 별 노래의 총 플레이 타임을 저장
		HashMap<String, Integer> total_time = new HashMap<>();
		for(int i = 0; i < genres.length; i++) {
			if(!song_list.containsKey(genres[i])) {
				song_list.put(genres[i], new ArrayList<>());
				total_time.put(genres[i], plays[i]);
			}
			else {
				total_time.put(genres[i], total_time.get(genres[i]) + plays[i]);
			}
			song_list.get(genres[i]).add(new Song(i, plays[i]));
		}
		// 장르별 노래의 총 플레이 타임을 내림차순으로 정렬
		List<String> total_play_list = new ArrayList<>(total_time.keySet());
		Collections.sort(total_play_list, (value1, value2) -> total_time.get(value2.compareTo(total_time.get(value1))));
        return answer;
	}
}

// Comparable 인터페이스를 compareTo로 비교해서 정렬 기능 구
class Song implements Comparable<Song> {
	int idx, play_time;
	public Song(int idx, int play_time) {
		this.idx = idx;
		this.play_time = play_time;
	}
	
	@Override
	public int compareTo(Song other_song) {
		return play_time - other_song.play_time;
	}
}
